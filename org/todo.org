* architecture mysteries
** Museq Action vs. Museq Msg
*** should separate Museqs control the same synth?
*** will harmony be a function with multiple Museq Action arguments?
** Many voices to one harmonizer
** Distribute concurrent notes across synths
*** automatically, rather than requiring the user to say which go where.
** [dubious] Represent a Museq in more than one way
*** Refactoring Museq to simply include end times took 10 hours today (August 20) plus a few yesterday.
**** finished at commit 2d2d2311094e2cc15f9fa88eb0def1aa9f871a14,
* TODO polyphonic refactor
** TODO consider what happens to (maybe) Ev names after Join.hs ops
*** after Transform.hs ops: nothing changes
*** Join.append: nothing changes
*** Join.stack: make two versions, stack' guaranteeing distinctness*
**** in stack', the names of one argument are prefixed with the least name not among those of the second argument
**** in both stack and stack', Nothing-named events require no extra work -- later they will be distinguished
**** in stack, like-named events from the two arguments will interact
*** TODO ??? Join.merge
seq 1         = a f          , a f
seq 2         = d    , d
seq 1 + seq 2 = a f d, a f d
**** assign names to everything before merge
**** join names with (++)
**** otherwise the same algorithm
*** Join.meta: suppose the Museq (Museq a -> Museq b) has two anonymous overlapping transformations, and the Museq a has two like-named serial operations.
**** Give the meta-museq unique names, then just (++) names from the two args
** merges should be polymomrphic
*** currently mergea, merge0, merge1 :: Museq Msg -> Museq Msg -> Museq Msg
* fix
** it should be an error for two notes with the same name to go to two different `SynthDefEnum`s
** use museqIsValid in join|transform tests
*** and test the new museqIsValid's extra clauses
* add
** abbreviations for map functions, imported as M
*** M.fl = M.fromList
*** M.u = M.union
** scales, harmonies
** parse a DSL for it
*** seems much easier to make the DSL after the functions it will encode
*** for every bit of terse punctuation, include a verbal alternative
**** => easier to remember, easier to search for language constructs
** not super important
*** space: play a duration n < k loop over duration k.
**** Was hard in Tidal, but maybe append makes it easy.
* supercollider mysteries
** envelopes
** many voices to one distortion
** slow changes, e.g. for slide guitar
* problems that seem solved
** bug ! melodies get mangled if tempo is near 1 but not 1
*** the problem was floating point error in `arc`, solved by using only Rationals as times
** chTempo: continuity
*** when changing tempo, figure out how many cycles have passed since time0
*** rewrite time0 so it's still true at the new tempo
* once it's publishable
** add Cabal install notes. Tom made suggestions in the seventh message of the haskell-art thread, "fVivid: Some code that parses instructions to synths polymorphically"
