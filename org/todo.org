* architecture mysteries
** Museq Action vs. Museq Msg
*** should separate(not part of the same GHC-evaluated expression) Museqs control the same synth?
*** will harmony be a function of multiple Museq Actions?
** Many voices to one harmonizer
** Distribute concurrent notes across synths
*** automatically, rather than requiring the user to say which go where.
** [dubious] Represent a Museq in more than one way
*** Refactoring Museq to simply include end times took 10 hours today (August 20) plus a few yesterday.
**** finished at commit 2d2d2311094e2cc15f9fa88eb0def1aa9f871a14, 
* ! polyphonic is hard
** the problem
*** Suppose pattern p has two freqs at one point, and later two amps. 
*** Should it render as four melodies? 
*** If it's only two melodies, which freq matches to which amp?
*** Should the bifurcation caused by a double-instruction persist after it ends? Precede it?
*** What happens when you merge or meta a polyphonic pattern with another?
*** Is stack useless on Msgs, and only useful on Actions?
** misc thoughts|questions
*** a Msg can have a duration
*** ? what do I want to be able to ask for
*** ? should I bury Msgs inside a more muscail type
* fix
** where are those "already a boop" errors coming from?
** rewriting DistribLoop
*** maybe adding frameDuration to startRender is unnecessary.
**** If so, adjust this function, and also replaceAll, chTempo, etc. -- maybe everything that calls getTime.
** museqIsValid: test that endpoints do not lead starts
** use museqIsValid in join|transform tests
*** and test the new museqIsValid's extra clauses
* add
** scales, harmonies
** parse a DSL for it
*** seems much easier to make the DSL after the functions it will encode
*** for every bit of terse punctuation, include a verbal alternative
**** => easier to remember, easier to search for language constructs
** not super important
*** space: play a duration n < k loop over duration k. 
**** Was hard in Tidal, but maybe append makes it easy.
* supercollider mysteries
** envelopes
** many voices to one distortion
** slow changes, e.g. for slide guitar
* problems that seem solved
** bug ! melodies get mangled if tempo is near 1 but not 1
*** the problem was floating point error in `arc`, solved by using only Rationals as times
** chTempo: continuity
*** when changing tempo, figure out how many cycles have passed since time0
*** rewrite time0 so it's still true at the new tempo
