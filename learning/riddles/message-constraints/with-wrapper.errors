riddles/message-constraints/with-wrapper.hs:32:16: error:
    • Could not deduce: params ~ p
      from the context: (VarList params,
                         Subset (InnerVars params) '["freq", "amp"])
        bound by a pattern with constructor:
                   Message :: forall params (sdArgs :: [ghc-prim-0.5.2.0:GHC.Types.Symbol]).
                              (VarList params, Subset (InnerVars params) sdArgs) =>
                              params -> Message sdArgs,
                 in a pattern binding
        at riddles/message-constraints/with-wrapper.hs:32:8-16
      ‘params’ is a rigid type variable bound by
        a pattern with constructor:
          Message :: forall params (sdArgs :: [ghc-prim-0.5.2.0:GHC.Types.Symbol]).
                     (VarList params, Subset (InnerVars params) sdArgs) =>
                     params -> Message sdArgs,
        in a pattern binding
        at riddles/message-constraints/with-wrapper.hs:32:8-16
      ‘p’ is a rigid type variable bound by
        the inferred type of a :: p
        at riddles/message-constraints/with-wrapper.hs:32:7-29
    • In the pattern: Message a
      In a pattern binding: (Message a) = message 0
      In the expression:
        do s <- synth boop ()
           let (Message a) = message 0
           set s a
           return ()
   |
32 |   let (Message a) = message 0
   |                ^

riddles/message-constraints/with-wrapper.hs:33:3: error:
    • Could not deduce: Subset (InnerVars params0) '["freq", "amp"]
        arising from a use of ‘set’
    • In a stmt of a 'do' block: set s a
      In the expression:
        do s <- synth boop ()
           let (Message a) = message 0
           set s a
           return ()
      In an equation for ‘main’:
          main
            = do s <- synth boop ()
                 let (Message a) = ...
                 set s a
                 ....
   |
33 |   set s a
   |   ^^^^^^^

riddles/message-constraints/with-wrapper.hs:33:3: error:
    • Ambiguous type variable ‘params0’ arising from a use of ‘set’
      prevents the constraint ‘(VarList params0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘params0’ should be.
      These potential instances exist:
        instance VarList (AddParams a b)
          -- Defined at /home/jeff/code/vivid/Vivid/SynthDef/TypesafeArgs.hs:327:10
        instance GHC.TypeLits.KnownSymbol a => VarList (I a)
          -- Defined at /home/jeff/code/vivid/Vivid/SynthDef/TypesafeArgs.hs:366:4
        instance VarList ()
          -- Defined at /home/jeff/code/vivid/Vivid/SynthDef/TypesafeArgs.hs:361:10
        ...plus 26 others
        (use -fprint-potential-instances to see them all)
    • In a stmt of a 'do' block: set s a
      In the expression:
        do s <- synth boop ()
           let (Message a) = message 0
           set s a
           return ()
      In an equation for ‘main’:
          main
            = do s <- synth boop ()
                 let (Message a) = ...
                 set s a
                 ....
   |
33 |   set s a
