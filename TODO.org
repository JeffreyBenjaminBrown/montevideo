* research
** the ' notation indicates moving synth labels from Note to Ev'
*** PITFALL: The Msg-Msg' distinction is not relevant to this migration.
*** a type partition
Note has names, Note' does not
Ev' has names, Ev does not
Museq' uses Ev', Museq uses Ev
Dispatch' uses Museq', Dispatch uses Museq
** Museqs (both kinds) contain Events, which (both kinds) have start and end
* TODO ! "off" as explicit 0-or-1 synth param, and explicit in Museqs
** the idea
When merging, choose whether "off" is multiplicative or additive.
If additive, it has a maximum of 1.
Make a Museq constructor that automatically creates "off=1" events
(with no other parameters going on) to fill in all gaps for each voice.
** TODO to prevent loud unisons
 Use per-voice explicit or random phase|freq variation.
 This way, when a polyphonic Museq is joined with another,
 and the poly one is silent,
 the many voices will not create huge waveform peaks.
** DONE it solves all these problems
*** TODO a way to break the "silence dominates" rule
Suppose two patterns A and B are merged,
and they have voices A0, B0 and B1.
If B0 and B1 are both off, but A0 is on,
and "action dominates" rather than silence,
then A0 should sound, and not the merges AO+B0 and A0+B1.
As soon as either B0 or B1 comes back, A0 should be replaced with A0+Bx.
Only when both B0 and B1 are both on ini B should we hear A0+B0 and A0+B1.
*** TODO Theory: The problem with joining named patterns
**** Monophonic voices => Names created from joining two notes must be unique.
**** TODO If both Museqs have polyphony, how many notes to make? What to call them?
**** TODO If the two input Museqs have no forever notes, will the output?
**** TODO solution ? Make "note off" a special kind of event that breaks the "silence wins" rule.
***** what that means
Normally, if either Museq is silent
(in the sense of sending no messages,
not in the sense of 0-amplitude)
then the merge or meta of the two of them is silent.
But "note off" could be a kind of message that propgates into the join always.
***** TODO If museq `a` says note off while polyphonic museq `b` is silent
then the merge of `a` and `b` must propogate the note-off message
to every relevant voice -- that is, each that starts with the name
used by museq `a`.
**** TODO solution ? "note off" events of duration > 0
so that always, for each voice (event name) used by a Museq, something is happening
* TODO ? the Join functions that accept two kinds of labels are dumb
They should accept only one kind, in the Monoid class,
and join them if needed with (<>).
* leads
./Dispatch/Dispatch.hs: -- todo ? awkward : The Ev' label gets repeated within the Action.
* also whatever is in org/todo.org
